<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RSS Item Generator</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            background-color: #fff;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: 30px auto;
        }
        h1 {
            color: #0056b3;
            text-align: center;
            margin-bottom: 25px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        input[type="text"],
        input[type="url"],
        textarea,
        input[type="datetime-local"] {
            width: calc(100% - 20px);
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box; /* Include padding in width */
        }
        textarea {
            resize: vertical;
            min-height: 80px;
        }
        button {
            background-color: #007bff;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            transition: background-color 0.2s ease;
        }
        button:hover {
            background-color: #0056b3;
        }
        .output-section {
            margin-top: 30px;
            border-top: 1px solid #eee;
            padding-top: 20px;
        }
        .output-section h2 {
            color: #0056b3;
            margin-bottom: 15px;
        }
        pre {
            background-color: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap; /* Wrap long lines */
            word-wrap: break-word; /* Break words if they are too long */
            font-size: 0.9em;
            position: relative;
        }
        .copy-button {
            background-color: #28a745;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.85em;
            position: absolute;
            top: 10px;
            right: 10px;
            transition: background-color 0.2s ease;
        }
        .copy-button:hover {
            background-color: #218838;
        }
        .copy-message {
            margin-top: 10px;
            font-size: 0.9em;
            color: #28a745;
            text-align: center;
        }
        .important-note {
            background-color: #fff3cd;
            border-left: 5px solid #ffeeba;
            padding: 15px;
            margin-top: 20px;
            border-radius: 4px;
            color: #856404;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>RSS Item Generator</h1>
        <div class="important-note">
            <p align="center">This tool generates one &lt;item&gt; tag for your RSS feed. Copy the output and paste it into your existing `feed.xml` on GitHub, typically at the top of the item list. Remember to manually update the &lt;lastBuildDate&gt; in your &lt;channel&gt; tag after adding a new item.</p>
            <p align="center"><a href="" target="_blank">Click here</a> for a more in-depth explanation.</p>
        </div>
        
        <br />
        
        <label for="postTitle">Post Title:</label>
        <input type="text" id="postTitle" placeholder="e.g., My New Adventure in Portugal">

        <label for="postLink">Post Link (Full URL to your note):</label>
        <input type="url" id="postLink" placeholder="e.g., https://vladcampos.com/your-site/Your-Note-Title">

        <label for="thumbnailUrl">Thumbnail URL (Optional, but recommended for images):</label>
        <input type="url" id="thumbnailUrl" placeholder="e.g., https://vladcampos.com/images/my-thumbnail.jpg">

        <label for="description">Description (Summary):</label>
        <textarea id="description" placeholder="A brief summary or the first paragraph of your note."></textarea>

        <label for="pubDate">Publication Date (Local Time - will be converted to GMT):</label>
        <input type="datetime-local" id="pubDate">

        <button onclick="generateRSSItem()">Generate RSS Item</button>

        <div class="output-section">
            <h2>Generated RSS Item Code:</h2>
            <pre id="rssOutput">
</pre>
            <button class="copy-button" onclick="copyToClipboard('rssOutput', 'copyMessage')">Copy to Clipboard</button>
            <div id="copyMessage" class="copy-message"></div>
        </div>

<center><script type="text/javascript" src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js" data-name="bmc-button" data-slug="vladcampos" data-color="#FFDD00" data-emoji="â˜•"  data-font="Cookie" data-text="Buy me a coffee" data-outline-color="#000000" data-font-color="#000000" data-coffee-color="#ffffff" ></script></center>
        
    </div>

    <script>
        // Function to format date to RSS standard (RFC 822)
        function toRFC822(date) {
            const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            const d = new Date(date);
            const dayOfWeek = days[d.getUTCDay()];
            const dayOfMonth = d.getUTCDate();
            const month = months[d.getUTCMonth()];
            const year = d.getUTCFullYear();
            const hours = String(d.getUTCHours()).padStart(2, '0');
            const minutes = String(d.getUTCMinutes()).padStart(2, '0');
            const seconds = String(d.getUTCSeconds()).padStart(2, '0');

            // RFC 822 requires a timezone, 'GMT' is common for UTC.
            return `${dayOfWeek}, ${dayOfMonth} ${month} ${year} ${hours}:${minutes}:${seconds} GMT`;
        }

        // Set current date/time to the input field on load
        window.onload = function() {
            const now = new Date();
            // Adjust for local timezone offset to display correctly in datetime-local input
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            document.getElementById('pubDate').value = now.toISOString().slice(0, 16); //YYYY-MM-DDTHH:MM format
        };

        // Escape special characters for XML
        const escapeXml = (str) => {
            return str.replace(/&/g, '&amp;')
                      .replace(/</g, '&lt;')
                      .replace(/>/g, '&gt;')
                      .replace(/"/g, '&quot;')
                      .replace(/'/g, '&apos;');
        };

        function generateRSSItem() {
            const title = document.getElementById('postTitle').value;
            const link = document.getElementById('postLink').value;
            const thumbnailUrl = document.getElementById('thumbnailUrl').value; // NEW: Get thumbnail URL
            const description = document.getElementById('description').value;
            const pubDateInput = document.getElementById('pubDate').value;

            if (!title || !link || !description || !pubDateInput) {
                alert('Please fill in all required fields (Title, Link, Description, Date)!');
                return;
            }

            const pubDate = new Date(pubDateInput); // Parse the local datetime string
            const formattedPubDate = toRFC822(pubDate);

            // Construct the optional media:content tag
            let mediaContentTag = '';
            if (thumbnailUrl) {
                // Determine a basic MIME type. A more robust solution would check the URL's extension.
                // For simplicity, we'll assume common image types.
                let imageType = 'image/jpeg'; // Default
                if (thumbnailUrl.toLowerCase().endsWith('.png')) {
                    imageType = 'image/png';
                } else if (thumbnailUrl.toLowerCase().endsWith('.gif')) {
                    imageType = 'image/gif';
                } else if (thumbnailUrl.toLowerCase().endsWith('.webp')) {
                    imageType = 'image/webp';
                }

                mediaContentTag = `        <media:content url="${escapeXml(thumbnailUrl)}" medium="image" type="${imageType}" />`;
            }

            const rssItemCode = `
    <item>
        <title>${escapeXml(title)}</title>
        <link>${escapeXml(link)}</link>
        <guid isPermaLink="true">${escapeXml(link)}</guid>
        <description>${escapeXml(description)}</description>
        <pubDate>${formattedPubDate}</pubDate>${mediaContentTag ? '\n' + mediaContentTag : ''}
    </item>`.trim(); // .trim() removes leading/trailing whitespace

            document.getElementById('rssOutput').textContent = rssItemCode;
        }

        function copyToClipboard(elementId, messageId) {
            const outputText = document.getElementById(elementId).textContent;
            navigator.clipboard.writeText(outputText).then(() => {
                const messageDiv = document.getElementById(messageId);
                messageDiv.textContent = 'Copied to clipboard!';
                setTimeout(() => {
                    messageDiv.textContent = '';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy text: ', err);
                alert('Failed to copy. Please copy manually.');
            });
        }
    </script>
</body>
</html>
